name: CI (Linux and macOS)
on:
  workflow_call:
    inputs:
      ci_backend:
        description: 'Name of the job backend/target'
        default: ''
        required: false
        type: string
      ci_option:
        description: 'Name of the job option for display'
        default: ''
        required: false
        type: string
      bootstrap_args:
        default: ''
        required: true
        type: string
      matrix_image:
        default: ''
        required: true
        type: string
      matrix_compiler_cc:
        default: 'gcc'
        required: false
        type: string
      matrix_compiler_cxx:
        default: 'g++'
        required: false
        type: string
      timeout:
        default: 90
        description: 'Job timeout (minutes)'
        required: false
        type: number

env:
  BACKWARDS_COMPATIBILITY_ARRAYS: OFF
  TILEDB_CI_BACKEND: ${{ inputs.ci_backend }}
  TILEDB_CI_OS: runner.os
  CXX: ${{ inputs.matrix_compiler_cxx }}
  CC: ${{ inputs.matrix_compiler_cc }}
  bootstrap_args: "--enable-vcpkg --enable-ccache ${{ inputs.bootstrap_args }}"
  SCCACHE_BUCKET: tiledb-ci-cache
  SCCACHE_ENDPOINT: ${{ secrets.R2_S3_ENDPOINT }}
  SCCACHE_S3_KEY_PREFIX: tiledb-core/sccache/
  VCPKG_BINARY_SOURCES: 'clear;x-aws,s3://tiledb-ci-cache/tiledb-core/vcpkg/,readwrite'

jobs:
  build:
    strategy:
      matrix:
        os:
          - ${{ inputs.matrix_image }}
    runs-on: ${{matrix.os}}

    if: ${{ startsWith(github.ref , 'refs/tags') != true && startsWith(github.ref , 'build-') != true }}
    timeout-minutes: ${{ inputs.timeout || 90 }}
    name: ${{matrix.os}} - ${{ inputs.ci_backend }}${{ inputs.ci_option }}
    steps:
      - name: Checkout TileDB
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0

      - name: Configure AWS CLI
        run: ./scripts/ci/configure-aws-cli.py
        env:
          R2_S3_ENDPOINT: ${{ secrets.R2_S3_ENDPOINT }}
          R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}

      - name: Setup sccache
        uses: mozilla-actions/sccache-action@v0.0.3

      - name: Ubuntu Prelim
        if: ${{ startsWith(matrix.os, 'ubuntu-') == true }}
        run: ./scripts/ci/posix/prelim.sh
        shell: bash

      # Need this for virtualenv and arrow tests if enabled
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'
          cache: 'pip'

      - name: Install Python Dependencies
        run: |
          set -e pipefail
          python -m pip install --upgrade pip virtualenv
          pip install pyarrow pybind11 numpy

      - name: Setup Homebrew on MacOS # x-ref c8e49ba8f8b9ce
        if: ${{ startsWith(matrix.os, 'macos-') == true }}
        run: |
          set -e pipefail
          brew install automake pkg-config

      - name: Configure TileDB
        id: configure
        shell: bash
        run: |
          set -e pipefail
          # Show CMake Version
          cmake --version
          source $GITHUB_WORKSPACE/scripts/ci/bootstrap_libtiledb.sh

      - name: Build TileDB
        id: build
        shell: bash
        run: |
          set -e pipefail
          source $GITHUB_WORKSPACE/scripts/ci/build_libtiledb.sh

      - name: Test TileDB
        id: test
        shell: bash
        run: |
          set -e pipefail

          #  ** NOTE: most tests must run in the same shell **
          #  **       as build-services, especially tests   **
          #  **       requiring a backend emulator.         **

          source $GITHUB_WORKSPACE/scripts/ci/posix/build-services-start.sh

          cd $GITHUB_WORKSPACE/build

          # Bypass Catch2 Framework stdout interception with awk on test output
          ./tiledb/test/regression/tiledb_regression -d yes
          ./tiledb/test/ci/test_assert -d yes
          ./tiledb/test/tiledb_unit -d yes | awk '/1: ::set-output/{sub(/.*1: /, ""); print; next} 1'

          source $GITHUB_WORKSPACE/scripts/ci/posix/build-services-stop.sh

      - name: Build Examples
        run: |
          cd $GITHUB_WORKSPACE/build
          make -j4 examples

      - name: Run Examples
        run: |
          cd $GITHUB_WORKSPACE
          ./scripts/run-nix-examples.sh

      - name: Build Benchmarks
        run: |
          cd $GITHUB_WORKSPACE
          ./scripts/ci/build_benchmarks.sh

      - name: Dump Core Stacks on Failure
        if: ${{ failure() && startsWith(matrix.os, 'ubuntu-') == true }} # only run this job if the build step failed
        run: ./scripts/ci/posix/dump-core-stacks.sh

      - name: Upload Failure Artifacts (Linux) # https://github.com/actions/upload-artifact#where-does-the-upload-go
        if: ${{ startsWith(matrix.os, 'ubuntu-') == true }} # only run this job if the build step failed
        uses: actions/upload-artifact@v3
        with:
          retention-days: 10
          name: "coredumps.${{ github.job }}.${{ matrix.os }}.${{ github.run_number }}.${{github.run_id}}.${{github.run_attempt}}"
          if-no-files-found: warn # 'ignore', 'warn' or 'error' are available, defaults to `warn`
          path: |
            /var/lib/apport/coredump/

      - name: Upload Failure Artifacts (macOS) # https://github.com/actions/upload-artifact#where-does-the-upload-go
        if: ${{ failure() == true && startsWith(matrix.os, 'macos-') == true }} # only run this job if the build step failed
        uses: actions/upload-artifact@v2
        with:
          retention-days: 10
          name: "${{ matrix.os }}.coredumps.${{ github.job }}.${{ github.run_number }}.${{github.run_id}}.${{github.run_attempt}}"
          if-no-files-found: warn # 'ignore', 'warn' or 'error' are available, defaults to `warn`
          path: |
            /cores/

      - name: Test Status Check
        run: |
          # tiledb_unit is configured to set a  variable TILEDB_CI_SUCCESS=1
          # following the test run. If this variable is not set, the build should fail.
          # see https://github.com/TileDB-Inc/TileDB/pull/1400 (5f0623f4d3)
          if [[ "${{ steps.test.outputs.TILEDB_CI_SUCCESS }}" -ne 1 ]]; then
            exit 1;
          fi

      - name: Print Log Files On Failed Builds
        run: |
          cd $GITHUB_WORKSPACE/build
          for f in $(find . -name *.log); do
            echo "::group::$f"
            cat $f
            echo "::endgroup::"
          done
        if: ${{ failure() }} # only run this job if the build step failed
